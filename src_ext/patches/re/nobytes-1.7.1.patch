diff -Naur ocaml-re-1.7.1.old/lib/re.ml ocaml-re-1.7.1/lib/re.ml
--- ocaml-re-1.7.1.old/lib/re.ml	2016-10-19 23:18:44.000000000 +0200
+++ ocaml-re-1.7.1/lib/re.ml	2017-06-26 15:00:25.810941200 +0200
@@ -86,9 +86,9 @@
     (* The whole regular expression *)
     mutable initial_states : (Automata.category * state) list;
     (* Initial states, indexed by initial category *)
-    cols : Bytes.t;
+    cols : String.t;
     (* Color table *)
-    col_repr : Bytes.t;
+    col_repr : String.t;
     (* Table from colors to one character of this color *)
     ncol : int;
     (* Number of colors. *)
@@ -110,7 +110,7 @@
 type info =
   { re : re;
     (* The automata *)
-    i_cols : Bytes.t;
+    i_cols : String.t;
     (* Color table ([x.i_cols = x.re.cols])
        Shortcut used for performance reasons *)
     mutable positions : int array;
@@ -138,7 +138,7 @@
   else if c = re.lnl then
     cat_lastnewline lor cat_newline lor cat_not_letter
   else
-    match Bytes.get re.col_repr c with
+    match String.get re.col_repr c with
     (* Should match [cword] definition *)
       'a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '\170' | '\181' | '\186'
     | '\192'..'\214' | '\216'..'\246' | '\248'..'\255' ->
@@ -191,7 +191,7 @@
   desc
 
 let validate info (s:string) pos st =
-  let c = Char.code (Bytes.get info.i_cols (Char.code s.[pos])) in
+  let c = Char.code (String.get info.i_cols (Char.code s.[pos])) in
   let cat = category info.re c in
   let desc' = delta info cat c st in
   let st' = find_state info.re desc' in
@@ -218,7 +218,7 @@
 
 let rec loop info (s:string) pos st =
   if pos < info.last then
-    let st' = st.next.(Char.code (Bytes.get info.i_cols (Char.code s.[pos]))) in
+    let st' = st.next.(Char.code (String.get info.i_cols (Char.code s.[pos]))) in
     loop2 info s pos st st'
   else
     st
@@ -230,7 +230,7 @@
       (* It is important to place these reads before the write *)
       (* But then, we don't have enough registers left to store the
          right position.  So, we store the position plus one. *)
-      let st'' = st'.next.(Char.code (Bytes.get info.i_cols (Char.code s.[pos]))) in
+      let st'' = st'.next.(Char.code (String.get info.i_cols (Char.code s.[pos]))) in
       info.positions.(st'.idx) <- pos;
       loop2 info s pos st' st''
     end else begin
@@ -247,7 +247,7 @@
 
 let rec loop_no_mark info s pos last st =
   if pos < last then
-    let st' = st.next.(Char.code (Bytes.get info.i_cols (Char.code s.[pos]))) in
+    let st' = st.next.(Char.code (String.get info.i_cols (Char.code s.[pos]))) in
     if st'.idx >= 0 then
       loop_no_mark info s (pos + 1) last st'
     else if st'.idx = break then
@@ -287,7 +287,7 @@
       (* Special case for the last newline *)
       re.lnl
     else
-      Char.code (Bytes.get re.cols (Char.code s.[pos]))
+      Char.code (String.get re.cols (Char.code s.[pos]))
 
 let rec handle_last_newline info pos st groups =
   let st' = st.next.(info.re.lnl) in
@@ -299,7 +299,7 @@
     st'
   end else begin (* Unknown *)
     let c = info.re.lnl in
-    let real_c = Char.code (Bytes.get info.i_cols (Char.code '\n')) in
+    let real_c = Char.code (String.get info.i_cols (Char.code '\n')) in
     let cat = category info.re c in
     let desc' = delta info cat real_c st in
     let st' = find_state info.re desc' in
@@ -385,7 +385,7 @@
 
 let trans_set cache cm s =
   match Cset.one_char s with
-  | Some i -> Cset.csingle (Bytes.get cm i)
+  | Some i -> Cset.csingle (String.get cm i)
   | None ->
     let v = (Cset.hash_rec s, s) in
     try
@@ -394,8 +394,8 @@
       let l =
         Cset.fold_right
           s
-          ~f:(fun (i, j) l -> Cset.union (cseq (Bytes.get cm i)
-                                            (Bytes.get cm j)) l)
+          ~f:(fun (i, j) l -> Cset.union (cseq (String.get cm i)
+                                            (String.get cm j)) l)
           ~init:Cset.empty
       in
       cache := Cset.CSetMap.add v l !cache;
@@ -477,8 +477,8 @@
 (*XXX Use a better algorithm allowing non-contiguous regions? *)
 let split s cm =
   Re_cset.iter s ~f:(fun i j ->
-      Bytes.set cm i '\001';
-      Bytes.set cm (j + 1) '\001';
+      String.set cm i '\001';
+      String.set cm (j + 1) '\001';
     )
 
 let cupper =
@@ -518,20 +518,20 @@
   colorize regexp;
   !lnl
 
-let make_cmap () = Bytes.make 257 '\000'
+let make_cmap () = String.make 257 '\000'
 
 let flatten_cmap cm =
-  let c = Bytes.create 256 in
-  let col_repr = Bytes.create 256 in
+  let c = String.create 256 in
+  let col_repr = String.create 256 in
   let v = ref 0 in
-  Bytes.set c 0 '\000';
-  Bytes.set col_repr 0 '\000';
+  String.set c 0 '\000';
+  String.set col_repr 0 '\000';
   for i = 1 to 255 do
-    if Bytes.get cm i <> '\000' then incr v;
-    Bytes.set c i (Char.chr !v);
-    Bytes.set col_repr !v (Char.chr i)
+    if String.get cm i <> '\000' then incr v;
+    String.set c i (Char.chr !v);
+    String.set col_repr !v (Char.chr i)
   done;
-  (c, Bytes.sub col_repr 0 (!v + 1), !v + 1)
+  (c, String.sub col_repr 0 (!v + 1), !v + 1)
 
 (**** Compilation ****)
 
diff -Naur ocaml-re-1.7.1.old/lib/re_pcre.ml ocaml-re-1.7.1/lib/re_pcre.ml
--- ocaml-re-1.7.1.old/lib/re_pcre.ml	2016-10-19 23:18:44.000000000 +0200
+++ ocaml-re-1.7.1/lib/re_pcre.ml	2017-06-26 15:00:59.088712800 +0200
@@ -71,22 +71,22 @@
 
 (* From PCRE *)
 let string_unsafe_sub s ofs len =
-  let r = Bytes.create len in
-  Bytes.unsafe_blit s ofs r 0 len;
-  Bytes.unsafe_to_string r
+  let r = String.create len in
+  String.unsafe_blit s ofs r 0 len;
+  r
 
 let quote s =
   let len = String.length s in
-  let buf = Bytes.create (len lsl 1) in
+  let buf = String.create (len lsl 1) in
   let pos = ref 0 in
   for i = 0 to len - 1 do
     match String.unsafe_get s i with
     | '\\' | '^' | '$' | '.' | '[' | '|'
     | '('  | ')' | '?' | '*' | '+' | '{' as c ->
-      Bytes.unsafe_set buf !pos '\\';
+      String.unsafe_set buf !pos '\\';
       incr pos;
-      Bytes.unsafe_set buf !pos c; incr pos
-    | c -> Bytes.unsafe_set buf !pos c; incr pos
+      String.unsafe_set buf !pos c; incr pos
+    | c -> String.unsafe_set buf !pos c; incr pos
   done;
   string_unsafe_sub buf 0 !pos
 
diff -Naur ocaml-re-1.7.1.old/lib/re_str.ml ocaml-re-1.7.1/lib/re_str.ml
--- ocaml-re-1.7.1.old/lib/re_str.ml	2016-10-19 23:18:44.000000000 +0200
+++ ocaml-re-1.7.1/lib/re_str.ml	2017-06-26 15:01:11.479337800 +0200
@@ -126,12 +126,12 @@
   if p < len then begin
     let c = repl.[p] in
     if c <> '\\' then begin
-      Bytes.set res q c;
+      String.set res q c;
       replace orig repl (p + 1) res (q + 1) len
     end else begin
       match repl.[p + 1] with
         '\\' ->
-        Bytes.set res q '\\';
+        String.set res q '\\';
         replace orig repl (p + 2) res (q + 1) len
       | '0' .. '9' as c ->
         let d =
@@ -149,17 +149,17 @@
         in
         replace orig repl (p + 2) res (q + d) len
       | c ->
-        Bytes.set res q '\\';
-        Bytes.set res (q + 1) c;
+        String.set res q '\\';
+        String.set res (q + 1) c;
         replace orig repl (p + 2) res (q + 2) len
     end
   end
 
 let replacement_text repl orig =
   let len = String.length repl in
-  let res = Bytes.create (repl_length repl 0 0 len) in
+  let res = String.create (repl_length repl 0 0 len) in
   replace orig repl 0 res 0 (String.length repl);
-  Bytes.unsafe_to_string res
+  res
 
 let quote s =
   let len = String.length s in
