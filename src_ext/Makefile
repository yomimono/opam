ifneq ($(filter-out archives cache-archives,$(MAKECMDGOALS)),)
-include ../Makefile.config
endif

SRC_EXTS = cppo extlib re cmdliner ocamlgraph cudf dose3 uutf jsonm opam-file-format result uchar

URL_cppo = https://github.com/mjambon/cppo/archive/v1.5.0.tar.gz
MD5_cppo = bdc99442945f6bc26e7a8096d0975239

URL_extlib = https://github.com/ygrek/ocaml-extlib/releases/download/1.7.2/extlib-1.7.2.tar.gz
MD5_extlib = 0f550dd06242828399a73387c49e0eed

URL_re = http://github.com/ocaml/ocaml-re/archive/1.7.1.tar.gz
MD5_re = 0e45743512b7ab5e6b175f955dc72002

URL_cmdliner = http://erratique.ch/software/cmdliner/releases/cmdliner-1.0.0.tbz
MD5_cmdliner = 6baa375f393fbe9ca1fcb0a7a875e001

URL_ocamlgraph = http://ocamlgraph.lri.fr/download/ocamlgraph-1.8.7.tar.gz
MD5_ocamlgraph = e733b8309b9374e89d96e907ecaf4f76

URL_cudf = https://gforge.inria.fr/frs/download.php/file/36602/cudf-0.9.tar.gz
MD5_cudf = a4c0e652e56e74c7b388a43f9258d119

URL_dose3 = https://gforge.inria.fr/frs/download.php/file/36063/dose3-5.0.1.tar.gz
MD5_dose3 = e7d4b1840383c6732f29a47c08ba5650

URL_uutf = http://erratique.ch/software/uutf/releases/uutf-1.0.1.tbz
MD5_uutf = b8535f974027357094c5cdb4bf03a21b

URL_jsonm = http://erratique.ch/software/jsonm/releases/jsonm-1.0.1.tbz
MD5_jsonm = e2ca39eaefd55b8d155c4f1ec5885311

URL_opam-file-format = https://github.com/ocaml/opam-file-format/archive/2.0.0-beta3.tar.gz
MD5_opam-file-format = fb461d14a44aac3a43751aa936e79143

URL_result = http://github.com/janestreet/result/archive/1.2.tar.gz
MD5_result = 3d5b66c5526918f0f2ca9d6811ef09c8

URL_uchar = https://github.com/ocaml/uchar/releases/download/v0.0.1/uchar-0.0.1.tbz
MD5_uchar = 3a7e5de4c4f7f25f55d50693f92f1960

URL_jbuilder = https://github.com/dra27/jbuilder/archive/more-reads.tar.gz
MD5_jbuilder = 89f0b0fb8d1d53d6c6111f399cca0332

ifndef FETCH
ifneq ($(shell command -v curl > /dev/null),)
FETCH=curl -OL
else
FETCH=wget
endif
endif

ARCHIVES = $(foreach lib,$(SRC_EXTS),$(notdir $(URL_$(lib))))
lib_of = $(foreach lib,$(SRC_EXTS),$(if $(findstring $(1),$(URL_$(lib))),$(lib),,))

ifdef OCAML
# Portable md5check
MD5CHECK = $(OCAML) ../shell/md5check.ml $(1) $(2)
else
MD5CHECK = test "`md5sum $(1) | sed -e 's/^[^a-f0-9]*\([a-f0-9]*\).*/\1/'`" = "$(2)" || (rm $(1) && false)
endif

lib-ext: $(JBUILDER_DEP) build copy
	@

ifeq ($(JBUILDER),)
JBUILDER_DEP=jbuilder/_build/install/default/bin/jbuilder.exe
JBUILDER_CLONE=jbuilder.stamp
JBUILDER:=$(shell echo "$(JBUILDER_DEP)" | cygpath -f - -a)
else
JBUILDER_DEP=
JBUILDER_CLONE=
endif

jbuilder/_build/install/default/bin/jbuilder.exe: $(JBUILDER_CLONE)
	cd jbuilder && ocaml bootstrap.ml && ./boot

build: $(JBUILDER_DEP) clone
	"$(JBUILDER)" build @install

clone: $(JBUILDER_CLONE) $(SRC_EXTS:=.stamp)
	@

.PHONY: archives
archives: $(SRC_EXTS:=.download)
	@

cache-archives: $(SRC_EXTS:=.cache)
	@

%.cache:
	@mkdir -p archives
	@[ -e archives/$(notdir $(URL_$*)) ] || \
		($(FETCH) $(URL_$*) && mv $(notdir $(URL_$*)) archives/)

define cache_url
https://opam.ocaml.org/2.0~dev/cache/md5/$(shell echo $(MD5_$(1)) | cut -c -2)/$(MD5_$(1))
endef

define get_from_cache
{ $(FETCH) $(call cache_url,$(1)) && \
  mv $(MD5_$(1)) $(notdir $(URL_$(1))) && \
  $(call MD5CHECK,$(notdir $(URL_$(1))),$(MD5_$(1))); }
endef

%.download:
	[ -e  $(notdir $(URL_$*)) ] || \
    cp archives/$(notdir $(URL_$*)) . 2>/dev/null || \
	$(FETCH) $(URL_$*) && $(call MD5CHECK,$(notdir $(URL_$*)),$(MD5_$*)) || \
	$(call get_from_cache,$*)
	@touch $@

%.stamp: %.download
	mkdir -p tmp-$*
	cd tmp-$* && $(if $(patsubst %.tar.gz,,$(URL_$*)),bunzip2,gunzip) -c ../$(notdir $(URL_$*)) | tar xf -
	rm -rf $*
	@for ii in tmp-$*/*; do if [ -d $${ii} ]; then mv $${ii} $*; fi; done; \
	rm -rf tmp-$*
	@if [ -d patches/$* ]; then \
          cd $* && \
	  for p in ../patches/$*/*.patch; do \
	    patch -p1 < $$p; \
	  done; \
        fi
	@for j in $(wildcard jbuild-$* jbuild-$*-*); do \
     cp $$j $*$$(echo "$$j" | sed -e "s/jbuild-$*//" -e "s|-|/|g")/jbuild; \
   done
	@touch $*/$*.opam
	@touch $@

clean:
	rm -rf lib

distclean: clean
	rm -rf jbuilder $(SRC_EXTS)
	rm -f *.tar.gz *.tbz *.stamp *.download
	rm -rf _build
	[ -d archives ] && ([ "$$(find archives -maxdepth 0 -type d -empty)" != "" ] && rmdir archives || echo "WARNING! $$(pwd)/archives/ not empty so left") || true

LIB_EXTS = extlib re cmdliner ocamlgraph cudf dose3 uutf jsonm opam-file-format result uchar

copy: build
	mkdir -p lib
	for d in $(LIB_EXTS:%=$$(find _build/install/default/lib/% -type d)); do \
    cp $$d/* lib/ 2>/dev/null; \
  done
	rm lib/META lib/opam lib/*.cmxs lib/*.mli
